MATH BUG01
public class Solution {
	public int isPrime(int A) {
	    if(A==1)
	    {
	        return 0;
	    }
		int upperLimit = (int)(Math.sqrt(A));
		for (int i = 2; i <= upperLimit; i++) {
			if (A % i == 0)
			{
			    return 0;
			}
		}
		return 1;
	}
}

MATH BUG 02

public class Solution {
	public ArrayList<ArrayList<Integer>> squareSum(int A) {
		ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();

		for (int a = 0; a <Math.sqrt(A); a++) 
		{
			for (int b = a; b <Math.sqrt(A); b++) 
			{
				if ((a*a + b*b) == A) 
				{
					ArrayList<Integer> newEntry = new ArrayList<Integer>();
					newEntry.add(a);
					newEntry.add(b);
					ans.add(newEntry);
				}
			}
		}
		return ans;
	}
}

DECIBIN:
public class Solution {
	public String findDigitsInBinary(int a) {
	    return Integer.toBinaryString(a);
	}
}

FACTORS:
public class Solution {
	public ArrayList<Integer> allFactors(int num) {
	   ArrayList<Integer> list= new ArrayList<Integer>();
	   for(int i=1;i<=Math.sqrt(num);i++)
	   {
	       if(num%i==0)
	       {
	           if(i==Math.sqrt(num))
	           {
	               list.add(i);
	           }
	           else
	           {
	           list.add(i);
	           list.add(num/i);
	           }
	       }
	   }
	   list.sort(null);
        return list;
	}
}

SIEVE::::
public class Solution {
	public ArrayList<Integer> sieve(int n) {
	    ArrayList<Integer> list= new ArrayList<Integer>();
		int primes[]= new int[n+1];
		for(int i=0;i<=n;i++)
		{
			primes[i]=1;
		}
		primes[0]=0;
		primes[1]=0;
		for(int i=2;i<=n;i++)
		{
				if(primes[i]==1)
				{
					for(int j=2;i*j<=n;j++)
					{
						primes[i*j]=0;
					}
				}
		}
		for(int i=0;i<=n;i++)
		{
			if(primes[i]==1)
			{
				list.add(i);
			}
		}
		return list;
			
	

	}
}


VERIFY PRIME:
public class Solution {
	public int isPrime(int a) {
	    if(a==1)
	    {
	        return 0;
	    }
	    for(int i=2;i<=Math.sqrt(a);i++)
	    {
	        if(a%i==0)
	        
	        {
	            return 0;
	        }
	    }
	    return 1;
	}
}

PRIMESUM:::::::::::
public class Solution {
     public ArrayList<Integer> primesum(int A) {
        ArrayList<Integer> arr = new ArrayList<Integer>();
        for (int i = 2; i < A; i++) {
            if (isPrime(i) && isPrime(A - i)) {
                arr.add(i);
                arr.add(A - i);
                return arr;
            }
        }
        return arr;
    }

    public boolean isPrime(int number) {
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}

